# src/schema.graphql

enum FilterOperation {
  EQUALS
  CONTAINS
  STARTS_WITH
  ENDS_WITH
}

input FilterInput {
  field: String!
  op: FilterOperation!
  value: String!
}

type MessageReturn {
  message: String!
}

type Task {
  id: ID!
  name: String!
  description: String
  image: String
}

type TaskCompletion {
  id: ID!
  userTask: UserTask! # Use UserTask instead of Task
  date: String!
  completed: Boolean!
}

type User {
  id: ID!
  name: String!
  email: String!
  userTasks: [UserTask!]
  completions: [TaskCompletion!]
}

type UserTask {
  id: ID!
  userId: ID!
  task: Task!
  days: [Int!]! # Array of integers representing the days
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  me: User!
  userTasks: [UserTask!]!
  allTasks(filters: [FilterInput]): [Task!]!
  task(id: ID!): Task
  userCompletions(taskId: ID, startDate: String, endDate: String): [TaskCompletion!]!
}

type Mutation {
  createTask(name: String!, description: String): Task!
  signup(email: String!, password: String!, name: String!): User!
  login(email: String!, password: String!): AuthPayload!
  addMyTask(id: ID!): UserTask! # Return UserTask
  removeMyTask(id: ID!): MessageReturn! # Return UserTask
  completeTask(userTaskId: ID!, date: String!): TaskCompletion! # Now uses userTaskId
  uncompleteTask(userTaskId: ID!, date: String!): MessageReturn! # Now uses userTaskId
}
